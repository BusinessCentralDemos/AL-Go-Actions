name: GetPowerPlatformChanges
author: Andersg
inputs:
  shell:
    description: Shell in which you want to run the action (powershell or pwsh)
    required: false
    default: powershell
  actor:
    description: The GitHub actor running the action
    required: false
    default: ${{ github.actor }}
  token:
    description: The GitHub token running the action
    required: false
    default: ${{ github.token }}
  parentTelemetryScopeJson:
    description: Specifies the parent telemetry scope for the telemetry signal
    required: false
    default: "7b7d"
  solutionName:
    description: The Power Platform solution to get the changes from.
    required: true
  deploySettings: 
    description: The deploy settings
    required: false
    default: '{}'
  authSettings: 
    description: The auth settings
    required: false
    default: '{}'
  directCommit: 
    type: boolean
    description: If true, the changes will be committed directly to the branch. If not, the changes will be committed to a branch named after the solution.
    required: false
    default: false

runs:
  using: composite
  steps:
      - name: Parse DeployToSettings and AuthContext
        shell: ${{ inputs.shell }}
        run: ${{ github.action_path }}\ParseDeploymentAndAuthSettings.ps1 -deployToSettings '${{ inputs.deploySettings }}' -authContext '${{ inputs.authSettings }}'

      - name: Set up new branch for changes
        shell: ${{ inputs.shell }}
        run: ${{ github.action_path }}\GitCloneReponsitory.ps1 -Actor '${{ inputs.actor }}' -Token ${{ inputs.token }} -ParentTelemetryScopeJson ${{inputs.parentTelemetryScopeJson}} -DirectCommit '${{ inputs.directCommit }}'

      - name: Who am I
        uses: microsoft/powerplatform-actions/who-am-i@v0
        with:
          user-name: ${{env.userName}}
          password-secret: ${{env.password}}
          environment-url: ${{env.environmentUrl}}

      - name: export-solution action
        uses: microsoft/powerplatform-actions/export-solution@v0
        with:
          user-name: ${{env.userName}}
          password-secret: ${{env.password}}
          environment-url: ${{env.environmentUrl}}
          solution-name: ${{inputs.solutionName}}
          solution-output-file: ${{env.clonedRepoPath}}/${{inputs.solutionName}}.zip

      - name: unpack-solution action
        uses: microsoft/powerplatform-actions/unpack-solution@v0
        with:
          solution-file: ${{env.clonedRepoPath}}/${{inputs.solutionName}}.zip
          solution-folder: ${{env.clonedRepoPath}}/${{inputs.solutionName}}
          solution-type: "Unmanaged"
          overwrite-files: true
          process-canvas-apps: true

      - name: Test output
        shell: ${{ inputs.shell }}
        run: |
          ls ${{env.clonedRepoPath}}/${{inputs.solutionName}}
          ls ${{env.clonedRepoPath}}/${{inputs.solutionName}}/CanvasApps
          ls ${{env.clonedRepoPath}}

      - name: Remove zip file
        shell: ${{ inputs.shell }}
        run: rm ${{env.clonedRepoPath}}/${{inputs.solutionName}}.zip

      - name: Test output2
        shell: ${{ inputs.shell }}
        run: |
          ls ${{env.clonedRepoPath}}/${{inputs.solutionName}}
          ls ${{env.clonedRepoPath}}/${{inputs.solutionName}}/CanvasApps
          ls ${{env.clonedRepoPath}}

      - name: Commit to git (not working yet)
        shell: ${{ inputs.shell }}
        run: ${{ github.action_path }}\GitCommitChanges.ps1 -Actor ${{ inputs.actor }} -Token ${{ inputs.token }} -ParentTelemetryScopeJson ${{ inputs.parentTelemetryScopeJson }} -EnvironmentName '${{ env.environmentName }}' -PowerPlatformSolutionName ${{inputs.solutionName}} -Location '${{ env.clonedRepoPath }}' -ServerUrl '${{ env.serverUrl }}' -GitHubBranch '${{ env.gitHubBranch }}'

branding:
  icon: terminal
  color: blue

