name: DeployPowerPlatformSolution
author: Andersg
inputs:
  shell:
    description: Shell in which you want to run the action (powershell or pwsh)
    required: false
    default: powershell
  actor:
    description: The GitHub actor running the action
    required: false
    default: ${{ github.actor }}
  token:
    description: The GitHub token running the action
    required: false
    default: ${{ github.token }}
  parentTelemetryScopeJson:
    description: Specifies the parent telemetry scope for the telemetry signal
    required: false
    default: '7b7d'
  artifact:
    description: The Power Platform solution
    required: false
    default: '.'
  version:
    description: The Power Platform solution version
    required: false
    default: '.'
  deploySettings: 
    description: The deploy settings
    required: false
    default: '{}'
  authSettings: 
    description: The deploy settings
    required: false
    default: '{}'
    
runs:
  using: composite
  steps:
    - name: test input
      shell: ${{inputs.shell}}
      run: |
        Write-Host "Deploy settings: ${{ inputs.deploySettings }}";
        Write-Host "Auth settings: ${{ inputs.authSettings }}";
        Write-Host "Artifact: ${{ inputs.artifact }}";  
        Get-ChildItem -Recurse -Path "${{ inputs.artifact }}"
        
        
    - name: findSolutionFile
      shell: ${{inputs.shell}}
      run: |
            $filePath = Get-ChildItem -Path $path -Recurse -File | Select-Object -ExpandProperty FullName;
            Write-Host "Find Power Platform solution file";
            foreach($file in $filePath){
                if($file.contains("-PowerPlatformSolution-")){
                    Write-Host "Found match:"$file;
                    echo "powerPlatformSolutionPath=$file" >> $env:GITHUB_ENV
                    return;
                }
            }
  
    - name: Unpack solution artifact
      uses: microsoft/powerplatform-actions/unpack-solution@v0
      with:
        solution-file: ${{ env.powerPlatformSolutionPath }}
        solution-folder: .artifacts/tempPPSolution/source
        solution-type: "Unmanaged"
        overwrite-files: true
        process-canvas-apps: true
    
    - name: see files
      shell: ${{inputs.shell}}
      run: ls .artifacts/tempPPSolution/source
    
    - name: Parse deployTo JSON
      shell: ${{inputs.shell}}
      run: |
        $json = '${{ inputs.deploySettings }}'
        $obj = ConvertFrom-Json $json

        Write-Output $obj.environmentName
        $environmentName = $obj.environmentName;
        echo "environmentName=$environmentName" >> $env:GITHUB_ENV

        Write-Output $obj.'environment-url'
        $environmentUrl = $obj.'environment-url';
        echo "environmentUrl=$environmentUrl" >> $env:GITHUB_ENV

        Write-Output $obj.bcEnvironment
        $bcEnvironment = $obj.bcEnvironment;
        echo "bcEnvironment=$bcEnvironment" >> $env:GITHUB_ENV

        write-output $obj.bcCompanyId
        $bcCompanyId = $obj.bcCompanyId;
        echo "bcCompanyId=$bcCompanyId" >> $env:GITHUB_ENV

    - name: Rebuild solution
      uses: BusinessCentralDemos/AL-Go-Actions/BuildPowerPlatform@PowerPlatform
      with:
        shell: ${{ inputs.shell }}
        parentTelemetryScopeJson: ${{ inputs.parentTelemetryScopeJson }}
        solution: .artifacts/tempPPSolution/source
        outputFolder: .artifacts/tempPPSolution
        version: 1.0.0.2
        companyId: ${{ env.bcCompanyId }}
        environmentName: ${{ env.bcEnvironment }}
branding:
  icon: terminal
  color: blue
